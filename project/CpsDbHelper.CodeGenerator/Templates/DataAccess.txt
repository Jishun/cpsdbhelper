/*Generated by CpsDbHelper CodeGenerator, require CpsDbHelper version >= {{HelperVersion}}
Source code at https://github.com/djsxp/cpsdbhelper
*/
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using CpsDbHelper;
using CpsDbHelper.Extensions;
using CpsDbHelper.Utils;
{{Usings[Collection]}}using {{Using}};
{{Usings[CollectionEnd]}}

namespace {{Namespace}}
{
    {{ClassAccess}} partial class {{DataAccessClassName}} : I{{DataAccessClassName}}
    {
        private DbHelperFactory _db;

        public {{DataAccessClassName}}(string connectionString)
        {
            _db = new DbHelperFactory(connectionString);
        }

        public void BeginTransaction()
        {
            _db.BeginTransaction();
        }

        public void EndTransaction(bool commit = true)
        {
            _db.EndConnection(commit);
        }
        {{MultipleMethods[Collection]}}
        public {{(EntityName)[Wrap(async Task<;>;GetAsync),IList]}} Get{{EntityName[Plural]}}By{{Params[Collection, Join(And)]}}{{Name[SqlShortName]}}{{Params[CollectionEnd]}}{{GetAsync}}({{Params[Collection, Join(, )]}}{{Type[CSharpType]}} {{Name[SqlShortName, FirstLower]}}{{Params[CollectionEnd]}})
        {
            const string query = "SELECT * FROM {{TableName}} WHERE {{Params[Collection, Join( AND )]}}[{{Name[SqlShortName]}}] = @{{Name[SqlShortName, FirstLower]}}{{Params[CollectionEnd]}}";
            var reader = {{Await[Select(await ;;GetAsync)]}}_db.BeginReader(query){{Params[Collection]}}
                         .Add{{Type[DbHelperSqlType,FirstUpper]}}InParam("{{Name[SqlShortName]}}", {{Type[CSharpEnumCast(Name)]}}{{Name[SqlShortName, FirstLower]}}, true){{Params[CollectionEnd]}}
                         .AutoMapResult<{{EntityName}}>() 
                         .ExecuteSqlString{{GetAsync}}();
            var ret = reader.GetResult<IList<{{EntityName}}>>(); 
            return ret;
        }
        {{MultipleMethods[CollectionEnd]}}
        {{UniqueMethods[Collection]}}
        public {{(EntityName)[Wrap(async Task<;>;GetAsync)]}} Get{{EntityName}}By{{Params[Collection, Join(And)]}}{{Name[SqlShortName]}}{{Params[CollectionEnd]}}{{GetAsync}}({{Params[Collection, Join(, )]}}{{Type[CSharpType]}} {{Name[SqlShortName, FirstLower]}}{{Params[CollectionEnd]}}{{Foreigns[Collection]}}, bool include{{EntityName[Plural]}} = false{{Foreigns[CollectionEnd]}})
        {
            const string query = "SELECT * FROM {{TableName}} WHERE {{Params[Collection, Join( AND )]}}[{{Name[SqlShortName]}}] = @{{Name[SqlShortName, FirstLower]}}{{Params[CollectionEnd]}}{{Foreigns[Collection]}} IF(@include{{EntityName[Plural]}} = 1) SELECT * FROM {{TableName}} WHERE{{Params[Collection,Join( AND)]}} {{Name[SqlShortName]}} = @{{ForeignName[SqlShortName,FirstLower]}} {{Params[CollectionEnd]}}{{Foreigns[CollectionEnd]}}";
            var reader = {{Await[Select(await ;;GetAsync)]}}_db.BeginReader(query){{Params[Collection]}}
                         .Add{{Type[DbHelperSqlType,FirstUpper]}}InParam("{{Name[SqlShortName]}}", {{Type[CSharpEnumCast(Name)]}}{{Name[SqlShortName, FirstLower]}}, true){{Params[CollectionEnd]}}{{Foreigns[Collection]}}
                         .AddBitInParam("include{{EntityName[Plural]}}", include{{EntityName[Plural]}}){{Foreigns[CollectionEnd]}}
                         .AutoMapResult<{{EntityName}}>(){{Foreigns[Collection]}}
                         .AutoMapResult<{{EntityName}}>("{{EntityName[Plural]}}"){{Foreigns[CollectionEnd]}}
                         .ExecuteSqlString{{GetAsync}}();
            var ret = reader.GetResultCollection<{{EntityName}}>().FirstOrDefault();{{Foreigns[Collection]}}
            if(include{{EntityName[Plural]}} && ret != null){
                ret.{{EntityName[Plural]}} = reader.GetResultCollection<{{EntityName}}>("{{EntityName[Plural]}}");
            }{{Foreigns[CollectionEnd]}}
            return ret;
        }
        {{UniqueMethods[CollectionEnd]}}
        {{NonQueryMethods[Collection]}}
        public {{Task[Select(async Task;void;SaveAsync)]}} Save{{EntityName}}By{{Params[Collection, Join(And)]}}{{Name[SqlShortName]}}{{Params[CollectionEnd]}}{{SaveAsync}}({{EntityName}} {{EntityName[FirstLower]}})
        {
            const string query = "IF EXISTS(SELECT 1 FROM {{TableName}} WHERE {{Params[Collection, Join( AND )]}}[{{Name[SqlShortName]}}] = @{{Name[SqlShortName, FirstLower]}}{{Params[CollectionEnd]}}) UPDATE {{TableName}} SET {{Columns[Collection, Join(, )]}}[{{Name[SqlShortName]}}] = @{{Name[SqlShortName, FirstLower]}}{{Columns[CollectionEnd]}}  WHERE {{Params[Collection, Join( AND )]}}[{{Name[SqlShortName]}}] = @{{Name[SqlShortName, FirstLower]}}{{Params[CollectionEnd]}} ELSE INSERT INTO {{TableName}} ({{Columns[Collection, Join(, )]}}[{{Name[SqlShortName]}}]{{Columns[CollectionEnd]}}) VALUES({{Columns[Collection, Join(, )]}}@{{Name[SqlShortName, FirstLower]}}{{Columns[CollectionEnd]}})";
            var ret = {{Await[Select(await ;;SaveAsync)]}}_db.BeginNonQuery(query){{Columns[Collection]}} 
                         .Add{{Type[DbHelperSqlType,FirstUpper]}}InParam("{{Name[SqlShortName]}}",  {{Type[CSharpEnumCast(Name)]}}{{EntityName[FirstLower, Inherited(1)]}}.{{Name[SqlShortName]}}, true){{Columns[CollectionEnd]}}
                         .ExecuteSqlString{{SaveAsync}}(); 
        }
        {{NonQueryMethods[CollectionEnd]}}
        {{ScalarMethods[Collection]}}
        public {{IdentityColumns[Collection,Wrap(async Task<;SaveAsync)]}}{{Type[CSharpType]}}?{{IdentityColumns[CollectionEnd,Wrap(>;SaveAsync)]}} Save{{EntityName}}By{{Params[Collection, Join(And)]}}{{Name[SqlShortName]}}{{Params[CollectionEnd]}}{{SaveAsync}}({{EntityName}} {{EntityName[FirstLower]}})
        {
            const string query = "IF EXISTS(SELECT 1 FROM {{TableName}} WHERE {{Params[Collection, Join( AND )]}}[{{Name[SqlShortName]}}] = @{{Name[SqlShortName, FirstLower]}}{{Params[CollectionEnd]}}) UPDATE {{TableName}} SET {{Columns[Collection, Join(, )]}}[{{Name[SqlShortName]}}] = @{{Name[SqlShortName, FirstLower]}}{{Columns[CollectionEnd]}}  WHERE {{Params[Collection, Join( AND )]}}[{{Name[SqlShortName]}}] = @{{Name[SqlShortName, FirstLower]}}{{Params[CollectionEnd]}} ELSE BEGIN INSERT INTO {{TableName}} ({{Columns[Collection, Join(, )]}}[{{Name[SqlShortName]}}]{{Columns[CollectionEnd]}}) VALUES({{Columns[Collection, Join(, )]}}@{{Name[SqlShortName, FirstLower]}}{{Columns[CollectionEnd]}}) SELECT SCOPE_IDENTITY() END";
            var scalar = {{Await[Select(await ;;SaveAsync)]}}_db.BeginScalar<{{IdentityColumns[Collection]}}{{Type[CSharpType]}}?{{IdentityColumns[CollectionEnd]}}>(query){{IdentityColumns[Collection]}} 
                         .Add{{Type[DbHelperSqlType,FirstUpper]}}InParam("{{Name[SqlShortName]}}", {{EntityName[FirstLower, Inherited(1)]}}.{{Name[SqlShortName]}}, true){{IdentityColumns[CollectionEnd]}}{{Columns[Collection]}} 
                         .Add{{Type[DbHelperSqlType,FirstUpper]}}InParam("{{Name[SqlShortName]}}",  {{Type[CSharpEnumCast(Name)]}}{{EntityName[FirstLower, Inherited(1)]}}.{{Name[SqlShortName]}}, true){{Columns[CollectionEnd]}}
                         .ExecuteSqlString{{SaveAsync}}();
            var ret = scalar.GetResult(); 
            return ret;
        }
        {{ScalarMethods[CollectionEnd]}}
        {{UniqueMethods[Collection]}}
        public {{Task[Select(async Task;void;DeleteAsync)]}} Delete{{EntityName}}By{{Params[Collection, Join(And)]}}{{Name[SqlShortName]}}{{Params[CollectionEnd]}}{{DeleteAsync}}({{Params[Collection, Join(, )]}}{{Type[CSharpType]}} {{Name[SqlShortName, FirstLower]}}{{Params[CollectionEnd]}})
        {
            const string query = "DELETE FROM {{TableName}} WHERE {{Params[Collection, Join( AND )]}}[{{Name[SqlShortName]}}] = @{{Name[SqlShortName, FirstLower]}}{{Params[CollectionEnd]}}";
            {{Await[Select(await ;;DeleteAsync)]}}_db.BeginNonQuery(query){{Params[Collection]}}
                         .Add{{Type[DbHelperSqlType,FirstUpper]}}InParam("{{Name[SqlShortName]}}", {{Type[CSharpEnumCast(Name)]}}{{Name[SqlShortName, FirstLower]}}, true){{Params[CollectionEnd]}}
                         .ExecuteSqlString{{DeleteAsync}}(); 
        }
        {{UniqueMethods[CollectionEnd]}}

        #region stored procedures
        {{Sps[Collection]}}
        public const string Sp_{{Name[SqlbareName]}} = "{{Name}}"; //{{Params[Collection, Join(; )]}}{{Name[SqlShortName]}} {{Type[SqlShortName]}}{{Params[CollectionEnd]}}
        {{Sps[CollectionEnd]}}
        #endregion stored procedures

        #region ScalarFunction names
        {{ScalarFunctions[Collection]}}
        public const string Fn_{{Name[SqlbareName]}} = "{{Name}}"; //{{Params[Collection, Join(; )]}}{{Name[SqlShortName]}} {{Type[SqlShortName]}}{{Params[CollectionEnd]}}
        {{ScalarFunctions[CollectionEnd]}}
        #endregion ScalarFunction names
        
        #region InlineTableValuedFunction names
        {{InlineTableFunctions[Collection]}}
        public const string Fn_{{Name[SqlbareName]}} = "{{Name}}"; //{{Params[Collection, Join(; )]}}{{Name[SqlShortName]}} {{Type[SqlShortName]}}{{Params[CollectionEnd]}}
        {{InlineTableFunctions[CollectionEnd]}}
        #endregion InlineTableValuedFunction names
        
        #region MultiStatementTableValuedFunction names
        {{TableFunctions[Collection]}}
        public const string Fn_{{Name[SqlbareName]}} = "{{Name}}"; //{{Params[Collection, Join(; )]}}{{Name[SqlShortName]}} {{Type[SqlShortName]}}{{Params[CollectionEnd]}}
        {{TableFunctions[CollectionEnd]}}
        #endregion MultiStatementTableValuedFunction names
    }
}