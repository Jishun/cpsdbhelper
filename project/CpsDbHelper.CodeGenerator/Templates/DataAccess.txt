/*Generated by CpsDbHelper CodeGenerator, require CpsDbHelper version >= {{HelperVersion}}
Source code at https://github.com/djsxp/cpsdbhelper
*/
using System;
using System.Collections.Generic;
using System.Linq;
using CpsDbHelper;
using CpsDbHelper.Extensions;
using CpsDbHelper.Utils;

namespace {{Namespace}}
{
    public partial class {{DataAccessClassName}} : I{{DataAccessClassName}}
    {
        private DbHelperFactory _db;

        public {{DataAccessClassName}}(string connectionString)
        {
            _db = new DbHelperFactory(connectionString);
        }

        public void BeginTransaction()
        {
            _db.BeginTransaction();
        }

        public void EndTransaction(bool commit = true)
        {
            _db.EndConnection(commit);
        }
        {{MultipleMethods[Collection]}}
        public IList<{{TableName[SqlShortName]}}> Get{{TableName[SqlShortName,Plural]}}By{{Params[Collection, Join(And)]}}{{Name[SqlShortName]}}{{Params[CollectionEnd]}}({{Params[Collection, Join(, )]}}{{Type[CSharpType]}} {{Name[SqlShortName, FirstLower]}}{{Params[CollectionEnd]}})
        {
            const string query = "SELECT * FROM {{TableName}} WHERE {{Params[Collection, Join( AND )]}}[{{Name[SqlShortName]}}] = @{{Name[SqlShortName, FirstLower]}}{{Params[CollectionEnd]}}";
            var ret = _db.BeginReader(query){{Params[Collection]}}
                         .Add{{Type[DbHelperSqlType,FirstUpper]}}InParam("{{Name[SqlShortName]}}", {{Type[CSharpEnumCast(Name)]}}{{Name[SqlShortName, FirstLower]}}, true){{Params[CollectionEnd]}}
                         .AutoMapResult<{{TableName[SqlShortName]}}>() 
                         .ExecuteSqlString()
                         .GetResult<IList<{{TableName[SqlShortName]}}>>(); 
            return ret;
        }
        {{MultipleMethods[CollectionEnd]}}
        {{UniqueMethods[Collection]}}
        public {{TableName[SqlShortName]}} Get{{TableName[SqlShortName]}}By{{Params[Collection, Join(And)]}}{{Name[SqlShortName]}}{{Params[CollectionEnd]}}({{Params[Collection, Join(, )]}}{{Type[CSharpType]}} {{Name[SqlShortName, FirstLower]}}{{Params[CollectionEnd]}})
        {
            const string query = "SELECT * FROM {{TableName}} WHERE {{Params[Collection, Join( AND )]}}[{{Name[SqlShortName]}}] = @{{Name[SqlShortName, FirstLower]}}{{Params[CollectionEnd]}}";
            var ret = _db.BeginReader(query){{Params[Collection]}}
                         .Add{{Type[DbHelperSqlType,FirstUpper]}}InParam("{{Name[SqlShortName]}}", {{Type[CSharpEnumCast(Name)]}}{{Name[SqlShortName, FirstLower]}}, true){{Params[CollectionEnd]}}
                         .AutoMapResult<{{TableName[SqlShortName]}}>() 
                         .ExecuteSqlString()
                         .GetResult<IList<{{TableName[SqlShortName]}}>>(); 
            return ret.FirstOrDefault();
        }
        {{UniqueMethods[CollectionEnd]}}
        {{NonQueryMethods[Collection]}}
        public void Save{{TableName[SqlShortName]}}By{{Params[Collection, Join(And)]}}{{Name[SqlShortName]}}{{Params[CollectionEnd]}}({{TableName[SqlShortName]}} {{TableName[SqlShortName, FirstLower]}})
        {
            const string query = "IF EXISTS(SELECT 1 FROM {{TableName}} WHERE {{Params[Collection, Join( AND )]}}[{{Name[SqlShortName]}}] = @{{Name[SqlShortName, FirstLower]}}{{Params[CollectionEnd]}}) UPDATE {{TableName}} SET {{Columns[Collection, Join(, )]}}[{{Name[SqlShortName]}}] = @{{Name[SqlShortName, FirstLower]}}{{Columns[CollectionEnd]}}  WHERE {{Params[Collection, Join( AND )]}}[{{Name[SqlShortName]}}] = @{{Name[SqlShortName, FirstLower]}}{{Params[CollectionEnd]}} ELSE INSERT INTO {{TableName}} ({{Columns[Collection, Join(, )]}}[{{Name[SqlShortName]}}]{{Columns[CollectionEnd]}}) VALUES({{Columns[Collection, Join(, )]}}@{{Name[SqlShortName, FirstLower]}}{{Columns[CollectionEnd]}})";
            var ret = _db.BeginNonQuery(query){{Columns[Collection]}} 
                         .Add{{Type[DbHelperSqlType,FirstUpper]}}InParam("{{Name[SqlShortName]}}",  {{Type[CSharpEnumCast(Name)]}}{{TableName[SqlShortName, FirstLower, Inherited(1)]}}.{{Name[SqlShortName]}}, true){{Columns[CollectionEnd]}}
                         .ExecuteSqlString(); 
        }
        {{NonQueryMethods[CollectionEnd]}}
        {{ScalarMethods[Collection]}}
        public {{IdentityColumns[Collection]}}{{Type[CSharpType]}}?{{IdentityColumns[CollectionEnd]}} Save{{TableName[SqlShortName]}}By{{Params[Collection, Join(And)]}}{{Name[SqlShortName]}}{{Params[CollectionEnd]}}({{TableName[SqlShortName]}} {{TableName[SqlShortName, FirstLower]}})
        {
            const string query = "IF EXISTS(SELECT 1 FROM {{TableName}} WHERE {{Params[Collection, Join( AND )]}}[{{Name[SqlShortName]}}] = @{{Name[SqlShortName, FirstLower]}}{{Params[CollectionEnd]}}) UPDATE {{TableName}} SET {{Columns[Collection, Join(, )]}}[{{Name[SqlShortName]}}] = @{{Name[SqlShortName, FirstLower]}}{{Columns[CollectionEnd]}}  WHERE {{Params[Collection, Join( AND )]}}[{{Name[SqlShortName]}}] = @{{Name[SqlShortName, FirstLower]}}{{Params[CollectionEnd]}} ELSE BEGIN INSERT INTO {{TableName}} ({{Columns[Collection, Join(, )]}}[{{Name[SqlShortName]}}]{{Columns[CollectionEnd]}}) VALUES({{Columns[Collection, Join(, )]}}@{{Name[SqlShortName, FirstLower]}}{{Columns[CollectionEnd]}}) SELECT SCOPE_IDENTITY() END";
            var ret = _db.BeginScalar<{{IdentityColumns[Collection]}}{{Type[CSharpType]}}?{{IdentityColumns[CollectionEnd]}}>(query){{IdentityColumns[Collection]}} 
                         .Add{{Type[DbHelperSqlType,FirstUpper]}}InParam("{{Name[SqlShortName]}}", {{TableName[SqlShortName, FirstLower, Inherited(1)]}}.{{Name[SqlShortName]}}, true){{IdentityColumns[CollectionEnd]}}{{Columns[Collection]}} 
                         .Add{{Type[DbHelperSqlType,FirstUpper]}}InParam("{{Name[SqlShortName]}}",  {{Type[CSharpEnumCast(Name)]}}{{TableName[SqlShortName, FirstLower, Inherited(1)]}}.{{Name[SqlShortName]}}, true){{Columns[CollectionEnd]}}
                         .ExecuteSqlString()
                         .GetResult(); 
            return ret;
        }
        {{ScalarMethods[CollectionEnd]}}
        {{UniqueMethods[Collection]}}
        public void Delete{{TableName[SqlShortName]}}By{{Params[Collection, Join(And)]}}{{Name[SqlShortName]}}{{Params[CollectionEnd]}}({{Params[Collection, Join(, )]}}{{Type[CSharpType]}} {{Name[SqlShortName, FirstLower]}}{{Params[CollectionEnd]}})
        {
            const string query = "DELETE FROM {{TableName}} WHERE {{Params[Collection, Join( AND )]}}[{{Name[SqlShortName]}}] = @{{Name[SqlShortName, FirstLower]}}{{Params[CollectionEnd]}}";
            _db.BeginNonQuery(query){{Params[Collection]}}
                         .Add{{Type[DbHelperSqlType,FirstUpper]}}InParam("{{Name[SqlShortName]}}", {{Type[CSharpEnumCast(Name)]}}{{Name[SqlShortName, FirstLower]}}, true){{Params[CollectionEnd]}}
                         .ExecuteSqlString(); 
        }
        {{UniqueMethods[CollectionEnd]}}

        #region stored procedures
        {{Sps[Collection]}}
        public const string Sp_{{Name[SqlbareName]}} = "{{Name}}"; //{{Params[Collection, Join(; )]}}{{Name[SqlShortName]}} {{Type[SqlShortName]}}{{Params[CollectionEnd]}}
        {{Sps[CollectionEnd]}}
        #endregion stored procedures

        #region ScalarFunction names
        {{ScalarFunctions[Collection]}}
        public const string Fn_{{Name[SqlbareName]}} = "{{Name}}"; //{{Params[Collection, Join(; )]}}{{Name[SqlShortName]}} {{Type[SqlShortName]}}{{Params[CollectionEnd]}}
        {{ScalarFunctions[CollectionEnd]}}
        #endregion ScalarFunction names
        
        #region InlineTableValuedFunction names
        {{InlineTableFunctions[Collection]}}
        public const string Fn_{{Name[SqlbareName]}} = "{{Name}}"; //{{Params[Collection, Join(; )]}}{{Name[SqlShortName]}} {{Type[SqlShortName]}}{{Params[CollectionEnd]}}
        {{InlineTableFunctions[CollectionEnd]}}
        #endregion InlineTableValuedFunction names
        
        #region MultiStatementTableValuedFunction names
        {{TableFunctions[Collection]}}
        public const string Fn_{{Name[SqlbareName]}} = "{{Name}}"; //{{Params[Collection, Join(; )]}}{{Name[SqlShortName]}} {{Type[SqlShortName]}}{{Params[CollectionEnd]}}
        {{TableFunctions[CollectionEnd]}}
        #endregion MultiStatementTableValuedFunction names
    }
}