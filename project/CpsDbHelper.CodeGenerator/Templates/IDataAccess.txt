/*Generated by CpsDbHelper CodeGenerator, require CpsDbHelper version >= {{HelperVersion}}
Source code at https://github.com/Jishun/cpsdbhelper
*/
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using CpsDbHelper;
using CpsDbHelper.Extensions;
using CpsDbHelper.Utils;
{{Usings[Collection]}}using {{Using}};
{{Usings[CollectionEnd]}}

namespace {{DalNamespace}}
{
    {{ClassAccess}} partial interface I{{DataAccessClassName}}
    {
        void BeginTransaction();
        void EndTransaction(bool commit = true);
        {{MultipleMethods[Collection]}}
		//Generated from '{{KeyName}}'
        {{(EntityName)[Wrap(Task<;>;GetAsync),IList]}} Get{{EntityName[Plural]}}By{{Params[Collection, Join(And)]}}{{Name[SqlShortName]}}{{Params[CollectionEnd]}}{{GetAsync}}({{Params[Collection, Join(, )]}}{{Type[CSharpType]}} {{Name[SqlShortName, FirstLower]}}{{Params[CollectionEnd]}});
        {{MultipleMethods[CollectionEnd]}}
        {{UniqueMethods[Collection]}}
		//Generated from '{{KeyName}}'
        {{EntityName[Wrap(Task<;>;GetAsync)]}} Get{{EntityName}}By{{Params[Collection, Join(And)]}}{{Name[SqlShortName]}}{{Params[CollectionEnd]}}{{GetAsync}}({{Params[Collection, Join(, )]}}{{Type[CSharpType]}} {{Name[SqlShortName, FirstLower]}}{{Params[CollectionEnd]}}{{Foreigns[Collection]}}, bool include{{EntityName[Plural]}} = false{{Foreigns[CollectionEnd]}});
        {{UniqueMethods[CollectionEnd]}}
        {{NonQueryMethods[Collection]}}
		//Generated from '{{KeyName}}'
        {{Task[Select(Task;void;SaveAsync)]}} Save{{EntityName}}By{{Params[Collection, Join(And)]}}{{Name[SqlShortName]}}{{Params[CollectionEnd]}}{{SaveAsync}}({{EntityName}} {{EntityName[FirstLower]}});
        {{NonQueryMethods[CollectionEnd]}}
        {{ScalarMethods[Collection]}}
		//Generated from '{{KeyName}}'
        {{IdentityColumns[Collection,Wrap(Task<;SaveAsync)]}}{{Type[CSharpType]}}?{{IdentityColumns[CollectionEnd,Wrap(>;SaveAsync)]}} Save{{EntityName}}By{{Params[Collection, Join(And)]}}{{Name[SqlShortName]}}{{Params[CollectionEnd]}}{{SaveAsync}}({{EntityName}} {{EntityName[FirstLower]}});
        {{ScalarMethods[CollectionEnd]}}
        {{UniqueMethods[Collection]}}
		//Generated from '{{KeyName}}'
        {{Task[Select(Task;void;DeleteAsync)]}} Delete{{EntityName}}By{{Params[Collection, Join(And)]}}{{Name[SqlShortName]}}{{Params[CollectionEnd]}}{{DeleteAsync}}({{Params[Collection, Join(, )]}}{{Type[CSharpType]}} {{Name[SqlShortName, FirstLower]}}{{Params[CollectionEnd]}});
        {{UniqueMethods[CollectionEnd]}}
    }
}